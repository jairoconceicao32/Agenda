#include "form.nvgt"
#include "speech.nvgt"
string[] names;
string[] fones;
int tamanho;

void addContacts() {
    audio_form text;
    text.create_window("Agenda telefônica");
    wait(50);
    int name = text.create_input_box("Digite o nome do contato", "");
    int foneNumber = text.create_input_box("Digite o telefone do contato", "");
    int addContat = text.create_button("Adicionar contato à agenda");
    array<int> inputs = {name, foneNumber, addContat};
    int indiceFoco = 0;
    text.focus(inputs[indiceFoco]);
    
    while (true) {
        if (key_pressed(KEY_ESCAPE)) break;
        wait(5);
        text.monitor();
        
        if (text.is_pressed(addContat)) {
            indiceFoco++;
            string nameStr = text.get_text(name);
            string foneNumberStr = text.get_text(foneNumber);
            
            if (foneNumberStr.length() < 11) {
                wait(5);
                speak("Telefone inválido");
                wait(10);
                indiceFoco = 2;
                text.focus(inputs[indiceFoco]);
            } else {
                names.insert_last(nameStr);
                fones.insert_last(foneNumberStr);
                tamanho++;
                speak("Contato adicionado!");
                text.set_text(name, "");
                text.set_text(foneNumber, "");
            }
        }
    }
}

void listContacts() {
    if (names.length() == 0 && fones.length() == 0) {
        wait(500);
        speak("A agenda está vazia!");
        wait(1000);
    } else {
        audio_form form;
        form.create_window("Agenda telefônica", true);
        
        for (int i = 0; i < tamanho; i++) {
            int listContacts = form.create_input_box(
                "Listando os contatos", 
                "Nome: " + names[i] + "\nTelefone: " + fones[i], 
                read_only = true, 
                multiline = true
            );
            
            while (true) {
                wait(5);
                if (key_pressed(KEY_ESCAPE)) break;
                form.monitor();
            }
        }
    }
}

void deleteContacts() {
    if (names.length() == 0 && fones.length() == 0) {
        wait(500);
        speak("A agenda está vazia!");
        wait(1000);
    } else {
        audio_form form;
        form.create_window("Deletar Contato", true);
        int contatoSelecionado = -1;

        // Exibir os contatos para seleção
        array<int> contactOptions;
        for (int i = 0; i < tamanho; i++) {
            int contactOption = form.create_button("Deletar: " + names[i] + " - " + fones[i]);
            contactOptions.insert_last(contactOption);
        }

        while (true) {
            wait(5);
            if (key_pressed(KEY_ESCAPE)) break;
            form.monitor();

            for (int i = 0; i < contactOptions.length(); i++) {
                if (form.is_pressed(contactOptions[i])) {
                    contatoSelecionado = i;
                    break;
                }
            }

            if (contatoSelecionado != -1) {
                // Remover contato selecionado
                string nomeDeletado = names[contatoSelecionado];
                names.remove_at(contatoSelecionado);
                fones.remove_at(contatoSelecionado);
                tamanho--;

                speak("Contato " + nomeDeletado + " foi deletado!");
                wait(1000);
                break;
            }
        }
    }
}
